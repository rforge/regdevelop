% -*- Mode: noweb; noweb-default-code-mode: R-mode; -*-
%\SweaveUTF8
\documentclass[11pt]{article}
\usepackage{graphicx}
%% \usepackage{Sweave}
\usepackage[utf8]{inputenc}
%% \usepackage{germanU}
%%- \usepackage[noae]{Sweave}
\usepackage[a4paper, text={14.5cm,22cm}]{geometry}
\usepackage{color} %uncomment BF
\usepackage{booktabs} % nice tables with \toprule \middlerule \bottomrule
\usepackage{amsmath} % for align
% \usepackage{wasysym} % for promille sign
% \usepackage{amssymb}
% \usepackage[textfont=it,font=small,labelfont=it]{caption}
\interfootnotelinepenalty=10000 % prevent LaTex from two-sided footnotes
\usepackage{pldescr}
%\VignetteEngine{knitr::knitr}
%\VignetteDepends{plgraphics}
%\VignetteIndexEntry{'plgraphics': A user-oriented collection of graphical R-functions based on the 'pl' concept}

\def\wh#1{\widehat{#1}}
\def\Gets{$<-$}

\addtolength{\textwidth}{2.5cm}%%--- 15.0 + 2.5 = 17.5
\addtolength{\oddsidemargin}{-1.04cm}

%% ================================================================

\begin{document}
%% \SweaveOpts{concordance=TRUE,width=9,height=6, echo=false}
\setkeys{Gin}{width=1\textwidth}
\baselineskip 15pt
\parskip 10pt

\title{\vspace*{-10mm}
`plgraphics': A user-oriented collection of graphical R-functions based on
 the `pl' concept}
\author{Werner A. Stahel, ETH Zurich}
\maketitle

\begin{abstract}\noindent
The package, \T{plgraphics}, collects enhanced versions of basic plotting
functions. It is based on a paradigm between the basic R graphics elements
and the more computer science oriented ggplot concepts.
The intention is to furnish user-oriented functions that allow efficient
production of useful graphics.
\end{abstract}

<<preliminary, echo=FALSE, out=FALSE>>=
library(plgraphics) ##, lib="/u/stahel/R/regdevelop/pkg/plgraphics.Rcheck")
options(warn=1)
knitr::opts_chunk$set(fig.width=8, fig.height=6)
@ 

\tableofcontents

\pagebreak
\section{Introduction}

The plotting functionality is the historical origin of the R package.
It has been introduced half a century ago and has grown for a while.
For the sake of upward compatibility, it has been essentially unchanged for
several decades. 

New graphical concepts, adjusted to the development of graphical devices
and computer science ideas have been implemented in new packages, 
notably \T{ggplot} ...

The intention of the package \T{plgraphics} is to implement some functions
that provide efficient production of simple to rather sophisticated plots,
but are still based on the core R functionality.
They have been developed over a long time with a focus on allowing 
for readily interpretable graphical diagnostics for regression model
development. 

The general idea is that it should be easy to produce standard plots 
by a simple call like \T{plot(x,y)} or \T{plot(y$\sim$x, data=dd)}, 
as well as enhancing the plot by adding an argument like \T{smooth=TRUE} 
to ask for a smoother or specifying 
a column in the dataset that drives the color or yields labels to mark the
points to be shown. 
Furthermore, the plots should remain useful if there are outliers 
or one of the two
variables is a grouping factor instead of a quantitative variable.

Asking that a basic function provides many variations under the control of
the user means that a large list of arguments must be available.
Some of these variations depend on the taste of the user. 
They can be specified in a kind of ``style list,'' analogous to 
\T{options} and \T{par}, which is called \T{ploptions}.

The package also provides enhanced low level graphical functions
like \T{plpoints}, which extends the functionality of \T{points}.
This leads to a short basic scatterplot function \T{plyx} that can
easily be modified by the user.

This document presents the main features of the package \T{plgraphics}
and explains the concepts behind them. 

The package is available from \T{R-forge}, e.g. by calling\\
\T{install.packages("plgraphics", repos="http://r-forge.r-project.org")}.\\

\section{Scatterplots}

\subsection{The basic scatterplot}
A basic scatterplot is generated by calling \T{plyx}
(plot y on x),
<<plyx>>=
plyx(Sepal.Width~Sepal.Length, data=iris, smooth=FALSE)
@ 
Clearly, this stongly resembles the result of simply calling \T{plot}, 
except for the thin gridlines and some documentation added by default: 
The name of the dataset is shown as a (sub-) title, and there is a small
text in the lower right corner that shows the date.
%% and a project label that has been set by typing 
%% \T{options(project="pl documentation")}.
Without \T{smooth=FALSE}, a smooth line is added, see below.

More arguments allow to specify many aspects of the plot.
<<plyx_pchar>>=
plyx(Sepal.Width~Sepal.Length, data=iris, 
     psize=Petal.Length^2, pcol=Species, pch=Species, cex=1.5)
@ 
The argument \T{psize} sets the size of the plotting symbols
such that their area is proportional to it.
The median size is determined by \T{cex}.
By default, this value adjusts to the number of observations.
\T{pcol} specifies the colors of the symbols.

See ... for details.

\Tit{Smooth.}
A smooth line fitting the data in the plot is produced if 
\T{smooth=TRUE}, which is the default value. 
The line type, width and color are modified by respective arguments.

Smooths can also be fitted groupwise by specifying \T{smooth.group}.

<<plyx_smooth, fig.width=8, fig.height=4>>=
plmfg(1,2, mar=c(3,3,1,1))
plyx(Sepal.Width~Sepal.Length, data=iris, smooth.col="red")

plyx(Sepal.Width~Sepal.Length, data=iris, smooth.group=Species,
     pcol=Species)
@ 
Setting \T{pcol=Species} allowed the color of plotting symbols and smooth
lines to be the same.
The call to \T{plmfg} splits the screen essentially like 
\T{par(mfrow=c(1,2))}.

%%- The function \T{plmfg} splits the figure region into multiple figures 
%%- (by setting \T{par(mrow=...)}).

\Tit{Groups.}
If the argument \T{group} is specified, separate plots will be generated
for the different groups, thereby maintaining the plot ranges.

<<plyx_group, fig.width=8, fig.height=7.5>>=
plmfg(2,2)
plyx(Sepal.Width~Sepal.Length, data=iris, group=Species)
@ 
%% !!! farbe stimmt nicht -- und lty wohl auch nicht.

\Tit{Inner range of plots.}
When there are outliers in the data, plots are dominated by their effect of
determining the plotting range. This means that the user who would like to
see more detail about the ``regular'' observations needs to gnerate a new
plot, specifying the limits of the plotting range by \T{xlim} and \T{ylim},
and the outliers will disappear.

In order to avoid the urge for two versions of the plot, an ``inner
plotting range'' is determined, based on robust measures of 
location and scale. Outside this range, there is a plotting margin where
coordinates are transformed with a highly nonlinear function in order to
accomodate all outliers. 
In these margins, the order of coordinates is still maintained, thus
allowing to see which points are further out than others, but quantitative
information is distorted by the transformation.
The figure shows data from the blasting example with an added outlier,
plotted without and with inner plotting limits.

<<innerrange, fig.width=7, fig.height=3>>=
data(d.blast)
dd <- d.blast
dd$distance[2] <- 200

plmfg(1,3, mar=c(3,3,1,1))

plyx( tremor~distance, data=dd, innerrange=FALSE)
plyx( tremor~distance, data=dd)
plyx( tremor~distance, data=dd, innerrange.factor=5)
@ 

If \T{innerrange=TRUE}, which is the default, the \T{plgraphics} functions
will determine an ``inner plotting range'' based on 
the 20\% trimmed mean and a 20\% trimmed scale by default.


%% innerrange
\Detail{The function \T{robrange}, which is called by \T{plinnerrange},
  determines the $\alpha$-trimmed mean with $\alpha=0.2$ as the location 
  and the (one-sided) trimmed mean of the deviations from it. 
  It adjusts this latter mean to obtain an approximately consistent
  estimate of the standard deviation for normal observations. 
  It then calculates the location plus-minus 
  \T{innerrange.factor} times the scale to get a potential inner range.
  The final inner plotting range will be the intersection of this and the
  ordianry range of the values.
}
%% ------------------------------

\subsection{Multiple y and x}
Two or more variables may be given to be plotted on the vertical axis,
in the sense of \T{matplot} of R.
Often, these are parallel time series, and it is convenient to ask for 
lines connecting the points, either \T{type="l"} or \T{type="b"}.
\T{plyx} will choose different scales for the different variables unless
\T{rescale=FALSE}.

<<plyx-multipley>>=
plyx(1:40, EuStockMarkets[1:40,], type="b")
@ 

The following plot shows a more elaborate example of a time series plot,
see ... for details about the generation of a time axis and
the additional arguments of \T{plyx}, respectively

<<plyx-time>>=
  data(d.river)
  plyx(T+O2+ra+Q~date, data=d.river, 
       subset=date<as.Date("2010-03-31")&hour==14, 
       smooth.par=0.5, smooth.xtrim=0.03, smooth.lty=1, sub="river data")
@ 

If multiple x variables are given, a separate plot is drawn for each of them.
<<plyx-multiplex, fig.width=8, fig.height=4>>=
plmfg(1,2, mar=c(3,3,3,1))
plyx(Sepal.Width~Sepal.Length+Petal.Length, data=iris, 
     smooth.group=Species, pcol=Species)
@ 

%%- \subsection{Groups}
%%- The argument \T{group} is used to generate multiple plots, one for each 
%%- factor level, using the same plotting scales and ranges.
%%- <plyx_group, fig_height=4>
%%- plmfg(1,3, mar=c(1,1,1,1))
%%- plyx(Sepal.Width~Sepal.Length, data=iris, group=Species)
%%- @ 

\subsection{Marking extreme points}

Extreme points are often of interest. They can easily be identified if they 
are labelled. This is achieved by setting the argument \T{markextremes}.

<<markextremes, fig.width=8, fig.height=4>>=
plmfg(1,2, mar=c(3,3,3,1))

plyx(Sepal.Width~Sepal.Length, data=iris[1:50,], smooth=F, 
     markextremes=0.1, cex=0.7)
## different proportions marked in different margins:
plyx(Sepal.Width~Sepal.Length, data=iris[1:50,], smooth=F, 
     markextremes=list(0,c(0.02,0.2)), cex=0.7)  
@ 
The default value of \T{markextremes} is 0 for \T{plyx}.
If the argument is \T{NA}, it depends on the number of 
observations: It is $1/(2\sqrt{n})$. 

\subsection{Factors, multibox plot}
If the x variable is a factor, R's generic plot function draws box plots.
Since this often results in too much simplification, \T{plyx} shows a 
``multibox plot'', which is a refinement of a boxplot, to be described in
more detail below.

The multibox plot can also be called directly.
<<mboxes>>=
plmfg()  ## reset to just 1 figure per plot
## plyx(Sepal.Width~Species, data=iris)  ## -- or --
plmboxes(Petal.Length~Species, data=iris)
@ 
%% !!! ausreisser verschwindet

\Tit{Censored data}
Censored data is shown with special symbols, determined by the ploption
\T{censored.pch}. The default for this option contains 8 elements
corresponding to the combined cases of no, right and left censoring of 
the x and y variables.

<<censored>>=
data(lung, package="survival")
plmfg(1,2,mar=c(3,3,1,1))
plyx(Surv(time,status) ~ age+wt.loss, data=lung, pcol=sex)
@ 

\Tit{Raw or transformed variables?}
Simple formulas just include names of variables on both sides of the $\sim$
symbol, separated by ``+'' if there are more than one. 
More advanced formulas consist of terms.
(Interaction terms act as two separate terms here.)
The user can choose if he or she wants to plot the terms or the variables
that are involved. 
The most common terms beyond raw variables are transformed variables.
If the argument \T{transformed} is \T{TRUE}, the terms will be used as
plotting variables (horizontal or vertical). 
Otherwise, the plotting variables are obained by applying \T{all.vars} to
both sides of the formula.


pmax(x1,x2)


\section{Scatterplot matrix}
The \T{pairs} plotting function of R has some inconvenient restrictions.
If the number of variables is larger than about 8, the panels become so
small that hardly anything can be discerned. Furtherore, factors are simply 
converted to numeric.

The function \T{plmatrix} has much more flexibility. 
If used for a small number of variables, it does a similar job as 
\T{pairs}, but also provides the flexibility for the panels that have been
described above.

<<plmatrix,  fig.width=10, fig.height=10>>=
plmatrix(iris, smooth.group=Species, pcol=Species)
@ 

\T{plmatrix} can also show any submatrix of the full scatterplot matrix.
<<plmatrix_sub>>=
plmatrix(~Petal.Length+Petal.Width, ~Sepal.Length+Sepal.Width, data=iris, 
         smooth.group=Species, pcol=Species)
@ 

When the number of variables to be shown in the x- or y-direction is large,
\T{plmatrix} will split the array of plots to be shown onto a suitable
number of plotting pages. The number of panels to be shown in either
direction can be set by arguments \T{nrow} and \T{ncol}. Otherwise, the
function will determine suitable numbers if the total number of panels
exceeds the threshold set in \T{ploptions("mfgtotal")}. The default is 30.


\section{Regression diagnostic plots}
Graphical regression diagnostics are the essential tools for developing
adequate models in many statistical problems.
The primary purpose of developing \T{plgraphics} has been to improve
regression diagnostic plots.
The features are obtained by using \T{plregr}.

\subsection{The basic diagnostic plots}
When R objects obtained from fitting a model are fed into R's \T{plot}
function, some fundamental diagnostic plots appear. 
The figure shows the versions of these displays obtained by \T{plregr}.

<<plotregr,  fig.width=8, fig.height=7.5>>=
data(d.blast)
rr <- 
  lm(logst(tremor)~location+log10(distance)+log10(charge), data=d.blast)
plregr(rr, xvar=FALSE)
@ 
Before we describe the plots in some detail, let us first explain a 
principle guiding the design of diagnostics.
Each diagnostic (plot) should be specific for a well-identified potential 
deficiency of the model.

\Tit{Residuals against fit: the Tukey-Anscombe plot.}
By default, the scatterplot of residuals against fitted values shows
the points with the feature of outlier margins and marking of extremes in
the residual direction. It adds a smooth line to show deviations from
the linearity assumption. Another 19 smooth lines are shown to 
mimik the variability of this smooth line under the hypothesis that the
model is correct.
It also adds a reference line indicating the direction of constant observed
response values $Y$. This helps to see whether a transformation of $Y$
could help to avoid any significant curvature.

\Detail{The smoother used by default to generate the smooth lines in the
  plot is \code{\link{loess}(..., span=smooth.par, iter=smooth.iter)},
  where \code{smooth.par} and \code{smooth.iter} are given in 
  \code{ploptions}.
  If the response of the model is a count (binary-binomial, Poisson or 
  of class \code{polr}), the non-robust version is called by 
  setting \code{iter} to 0 and \code{family} to \code{gaussian}.
  Otherwise, \code{loess} produces a robust smoother.
}

\Tit{Absolute residuals against fit.}
As a second diagram, the plot of absolute residuals against fitted values
is shown.
%% !!! V1 in absresfit
Note that the absolute residuals shown here in this plot are not the 
absolute values of the residuals used in the first plot. 
They differ in two ways:
\Itm
They are standardized to have the same variances.
... weighted
\Itm
By default, they are modified because in the following way.
Note first that the plot should show any dependence of the scale of the
random errors on the model value.
If the plot of residuals against fit shows a clear curvature, the
residuals do not show only the random errors but also the bias of the
regression function, which should be best approximated by the smooth line
in that first plot. Therefore, the residuals from the smooth line are 
used in the plot of absolute residuals against fit.
Additionally, they are standardized using the same factor that is commonly
used for standardizing the ordinary residuals.

censored: no intervals

\Tit{QQ-plot}
only for Gaussian

\Tit{Residuals against leverage}
The influence of individual observations on the results of fitting the model
is measured by the quantities produced by the function \T{influence}.
The most important measures are functions of the residuals and the 
leverage values, often denoted as $h_i$, which are proportional to
Mahalanobis distances from the center of the design based on the 
(formal) covariance matrix of the design.
Therefore, a plot of resuduals against leverages should reveal the overly
influential observations.

The leverage plot of \T{plregr} uses \emph{standardized} residuals
in contrast to R's standard leverage plot shown by \T{plot}.
In the case of weighted observations, ``de-weighted'' leverages,
\[
  h_i\sups{dw} = h_i/w_i = \vc x_i\tr (\mx X\tr \mx W \mx X)\inv \vc x_i
\]
are used, but weights are shown by the symbol's sizes.
This version maintains the idea that leverages should be proportional to 
Mahalanobis distances.

\Detail{
  The plot also shows contour lines of constant Cook's distance,
  defined as
\[
  D\sups C_i = \frac{r_i^2}{p\wh\sigma^2}\cdot\frac{h_i}{(1-h_i)^2}
    = {\textstyle 1\over p} r_i^{*2} \frac{h_i}{1-h_i}
\;.
\]
  Since the mean of $h_i$ is $1/p$, an observation with this leverage
  and a standardized residual of $1$ has $D\sups C=1\big/(p-1)$.
  Contour lines are drawn for $D_i\sups C=\pm c^2\big/(p-1)$, where $c$ is given 
  by \T{ploptions("cookdistlines")}.
  Note that this is different from standard R.
}

%% !!! verschieben?
In several non-Gaussian models, the estimator can be regarded as a weighted
Least Squares estimator with suitable weights. 
Therefore, the weighted version of the leverage plot is produced for such
models. 

%% =================================

The argument \T{xvar=FALSE} in the statement generating the last plot
indicates that by default, \T{plregr} 
shows more diagrams: The plots of residuals against explanatory variables.

\subsection{Residuals against input variables}
Since the ``x'' variables in a regression model cannot always be
interpreted as explaining the variability of the response $Y$,
we call them ``input'' variables here.

The plots of residuals against these variables are important regression
diagnostics. They are often neglected since the ordinary plot function
for models does not show them. 
\T{plregr} does, unless \T{xvars=FALSE} is used as it was above.
It does so by calling \T{plresx}, which can also be done directly.

<<plresx, fig.width=8, fig.height=7.5>>=
plresx(rr)
@ 
The input variables are often transformed before they are used 
in the linear predictor,
and the main purpose of showing a plot of residuals against them is
to possibly find a (more) adequate transformation.
For those that have been transformed already, the adequate transformation 
may be more easily guessed if the untransformed version is used in the
plot. The transformed variables can be called for by setting
\T{transformed=TRUE}.

<<plresx_trs, fig.width=8, fig.height=7.5>>=
plresx(rr, transformed=TRUE)
@ 

\Detail{
The raw input variables are those appearing in the formula, as delivered by
\T{all.vars(formula)}.

The transformed input variables are those appearing in the terms of the
formula, as delivered by \T{rownames(attr(terms(formula[1:2]), "factors"))}.
}

plregr(rr, transformed=TRUE, reflinesband=TRUE)

\Detail{
If the fit object contains a variable \T{weight}, then residuals will be
plotted against these weights by default, unless it is the result of 
\T{glm}.
  
}

fitcomp: use model.frame -> model.matrix -> lm.fit

\Tit{Plotting residuals against two regressors.}
A missing interaction term between \T{x1} and \T{x2} may be found when
examining a plot or residuals against these two variables.
This is achieved by the function \T{plrex2x}.
It produces a scatterplot of \T{x1} against \T{x2} and represents the
residuals as line segments with positive or negative slope, according to
their sign. The absolute value determines the length of the segment.

<<plres2x>>=
data(d.blast)
dd <- d.blast[as.numeric(d.blast$location)%in%c(1,3),]
rr <- lm(log10(tremor)~log10(distance)+log10(charge)+location, data=dd)
plres2x(~ log10(distance) + log10(charge), reg=rr, transformed=F,
        pcol=location)
@ 


\subsection{Censored residuals, ordinal and binary regression, 
  conditional quantiles}

In the case of censored observations or ordinal regression,
response residuals are not clearly defined.

In the case of right censoring, the underlying response value of a censored
observation is known to exceed a given threshold. Therefore, the 
``true residual'' exceeds a corresponding threshold.
The fitted model defines a conditional distribution for the true residual.

The same concept is available for an ordinal regression, where each observed
value defines an interval for the latent variable underlying the model.

\Tit{Conditional quantiles}
Function \T{condquant} calculates the quartiles of the conditional
distribution for each residual and, in addition, generates a corresponding
random number. It also stores the probability of the condition.

These quantities are then used for plotting: the conditional median is 
shown together with segments connecting the conditional quartiles.
This results in residual plots like those shown in the figure.

<<survresiduals>>=
require(survival)
data(lung)
rr <- survreg(Surv(time,status) ~ age+sex+wt.loss, data=lung)
plregr(rr, plotselect=c(default=0, resfit=1), xvar=FALSE, mf=c(1,1),
          smooth.sim=0)
@ 

\subsection{Residuals for the Cox model}

The Cox proportional hazards model, the most frequently used model in
survival analysis, is a semi-parametric model. There is no obvious meaning
of the notion residual in this context. 
The Cox-Snell residuals $R_{CS}$ are defined in a way that they always
follow an exponential distribution. 
Since this is an unususal law for residuals, it is convenient to transform
them such that they then obey a standard normal distribution,
\[
  R = \Phi\inv\fn{1-\exp\fn{-R_{CS}}}
\;.\]
Note that it is useless to draw a QQ-plot of these residuals, since they
obey the normal law by construction. 
They should be plotted against the linear predictor values 
(Tukey-Anscombe plot) and against the explanatory variables.

%% !!!

\Detail{
  The censored observations are shown with lighter color than the
  noncensored ones: their \T{pcol} is paled by applying \T{colorpale}
  with a \T{pale} of \T{ploptions("condquant.pale")[1]}. 
  The color of the bars representing the quartiles is the paled \T{pcol}, 
  paled again by \T{pale=ploptions("condquant.pale")[2]}
  If all observations are censored, no paling is applied to the symbols, and
  \T{ploptions("condquant.pale")[1]} is used for the bars. 
}

\subsection{Ordinal and binary (logistic) regression}

In ordinal regression, the response variable is modeled as a classified
version of a continuous latent variable, which in turn follows a linear
model with logistic (or normal) error distribution.
According to this construction, the latent variable $\widetilde Y_i$, given the
observed ordered variable $Y_i$ and the linear predictor $\eta_i$, 
follows a truncated logistic (or normal) distribution. 
As with censored variables, this yields conditional quantiles, which
can be represented as described in the previous subsection.

<<ordered>>=
cat("!!!")  
@ 

A logistic regression can be seen as a special case of an ordinal regression.
Therefore, conditional quantiles can also be generated for the residuals,
and the respective displays can be generated.
The following figure shows the residuals against linear predictor values,
first with conditional quantiles, then with ``working'' residuals,
one of the usual choices.

<<resfitbin, figure.height=4>>=
  data(d.babysurvival)
  rr <- glm(Survival~Weight+Age+Apgar1,data=d.babysurvival,family=binomial)
  plmfg(1,2, mar=c(3,3,3,1))
  plregr(rr, plotselect=c(resfit=2, default=0), xvar=FALSE)
  plregr(rr, plotselect=c(resfit=2, default=0), condquant=FALSE, 
            xvar=FALSE)
@ 

\Detail{If \T{condquant} is false, the type of residuals is selected by
  the argument or ploption \T{glm.restype}.
  Its default is \T{"working"}, because the linear approximation of the 
  model corresponds to a weighted linear regression with the linear
  predictor values and the working residuals as fitted values and residuals.
  The weights are shown by the sizes of the plotting symbols.
}

%% ==============================================================
\section{Options}
A central motivation underlying the \T{plgraphics} package consists of
allowing for using graphical elements very flexibly and implementing an
easy way to specify and maintain such options.
They are set either explicitly by calling \T{ploptions} or generated
by high level pl functions and stored for further use.

\subsection{Pl options}
The graphical elements, like plotting character, color, line types, etc.\ 
to be used in pl graphics are specified by the function \T{ploptions}
like R's graphical ``parameters'' and other options are determined by the
functions \T{par} and \T{options}.

<<ploptions>>=
t.plopt <- ploptions(col="magenta", pch=3, smoothlines.lty=3)
plyx(Sepal.Width~Sepal.Length, data=iris)
## restore the old optios
ploptions(list=attr(t.plopt, "old"))
@ 

There are some differences between the behavior of \T{ploptions} and \T{par}:
\Itm
The pl options are stored in a list \T{.ploptions} in the global
environment and are therefore not erased when leaving the R session. 
\Itm
There is a list \T{ploptionsDefault} in the package. It collects the
package's default settings and is used as a backup if some components should
not be contained in \T{.ploptions}.
\Itm
Both of these lists can be overriden by objects with the same name
that appear earlier in the search list than the \T{plgraphics} package.
\Itm
The value returned by \T{ploptions} is the entire, modified list of 
pl options. The old values are stored in the attribute \T{attr( ,"old")}
to be used for restoring them, see above.

\Tit{Remark:}
The concept of the ploptions list is a version of a more general idea, 
suggesting that the default values of any ``high level'' R function should 
have an associated list of default arguments, which is not contained in 
the function definition, but stored separately. 
This would allow the user more generally to specify his own style by 
changing these defaults and storing them in a kind of style file to be 
loaded at the start of each session. 
Here, there is only one list because the various pl functions need the 
same graphical elements.

Thus, a graphical element like a plotting character is generally searched 
in
\begin{enumerate}
\item 
  the argument list of the calling function,
\item
  the \T{ploptions} argument of the calling function,
\item
  the \T{.ploptions} list in the global environment,
\item
  the list \T{ploptionsDefault} in the package \T{plgraphics}
  or in an environment hiding it.
\end{enumerate}

The components of these lists include
\begin{itemize}
\item 
  \T{colors}, the palette of colors to be used;
\item
  \T{linewidth}, the linewidths used for the different line types.
  If the line types are shown with the same \T{lwd}, they are perceived
  with different intensity. \T{linewidth} intends to compensate this effect.
\item
  \T{cex}, the median character expansion.
  The default is the function \T{cexSize} with an argument \T{n}, defined as
  \T{min(1.5/log10(n), 2)}, that is called when the number \T{n} of
  observations is available. Alternatively, a fixed scalar can be given.
\item
  a group of basic components:
  \T{pch, cex, cex.pch, cex.plab, lty, lwd, col}.\\
  \T{cex} is a factor which will be applied to \T{cex.pch} above for
  showing points by a single symbol (\T{pch}),\\
  \T{cex.plab} is an additional factor applied for the points that
  are shown by \T{plab}.
\item
  a group of compnents named \T{group} (\T{group.pch, ...}).
  They characterize how different groups will be displayed.
  Thus, \T{group.pch} should be a vector defining the plotting symbol
  for the first, second, ... group (when there are groups in the data).
\item
  a group named \T{variables}, 
  defining the elements to be used when different variables should be
  distinguishable;
\item
  \T{censored.pch} and \T{censored.cex} used to show censored observations;
\item
  \T{mar, oma, mgp, thickintervals}, specifying the number of lines in the
  figure's margins and outer margins, the ``margin parameters'' as in
  \T{par}, and the targeted number of tick intervals for axis labelling.
  The latter usually consists of 2 numbers, specifying the number of
  intervals for all ticks and for labelled ones, respectively. 
\item
  \T{stamp}, logical value determining if a stamp should be added in the
  bottom right corner of each plotting page;
\item
  a group \T{innerrange}, determining if and how an inner plotting range
  should be used and generated;
\item
  \T{plext}: percentage by which the range of the data should be
  extended unless an inner range is active (in which case the extension 
  is determined by \T{innerrange.ext}), and\\
  \T{plextext}: further extension to allow for large symbols near the 
  limits of the plotting range;
\item
  \T{markextremes} sets the proportion of extreme points that are shown 
  with labels to help identify them.
  If set to \code{TRUE}, the proportion depends on the number \T{n} of
  observations through \code{ceiling(sqrt(n)/2)/n}.
\item
  \T{title.cex} determines the character expansion of the plot title.
  By default, it adapts to the length of the title.
  For long titles, it will however never be smaller than
  \T{title.cexmin}. 
  If \T{title.cex} has 2 elements, the second refers to the subtitle.
\item
  a group \T{gridlines}. If \code{gridlines} is a list of two vectors,
  it contains the values where vertical and horizontal thin lines are drawn.
  If it is \T{TRUE}, the gridlines correspond to the tickmarks of the
  two axes.
  \T{gridlines.lty, gridlines.lwd, gridlines.col} set the respective
  properties for the gridlines.
\item
  a group \T{zeroline}, which is analogous to \T{gridlines}, but the
  default is the value 0 for both axes, and the properties are independent
  of those for \T{gridlines};
\item
  a group \T{refline}, again setting the properties \T{lty, lwd, col},
  to be used in \T{plrefline};
\item
  a group \T{smoothline}, analogous to \T{refline}, used to draw smooths
  when \T{smooth} is \T{TRUE} by calling \T{plsmoothline};
  %% usually generated by setting \T{smooth} to \T{TRUE}.
\item
  a group \T{smooth}. If \T{smooth} is \T{TRUE}, a smoothing function 
  with default \Hneed{80mm} \T{ploptions("smooth.function")} 
  is called to calculate a
  smooth line and show it according toe the \T{smoothline} properties;
\item
  a group \T{bar} needed to show reference values for levels of factors
  used as explanatory variables in regression diagnostic plots;
\item
  \T{factor.show} indicates the way in which plots with factors are shown,
  presently only if one of the two variables (x or y) is a factor and the
  other, quantitative. Then, the factor can be jittered and then used
  as a quantitative variable, or a box plot or a ``multibox plot'' can be 
  chosen.
\item
  \T{jitter}: logical indicating if factors should be shown with jittering.
  A named vector may be given that defines the jittering for each
  variable.\\ 
  \T{jitter.factor} is the jittering factor used, see \T{?jitter}.
\item
  \T{condprobrange} is used to determine which bars should be shown
  in the case of censored data.
\item
  \T{functionxvalues} contains the number of argument values for which 
  a smooth function or fitting component is evaluated in diagnostic plots.
\item
  \T{leveragelimit} determines the range used for leverage values
  when plotting residuals against leverages.
\end{itemize}

%% ---------------------------------
\subsection{Organization of graphical metadata}
%%pl.control, pldata, plargs
Pl graphics rely on generating and maintaining metadata that guide the
details of creating the plots. This is implemented in the following way.

\Tit{\T{pl.control}.}
High level pl functions call the function \T{pl.control} first.
It generates the ``plotting dataset'' \T{pldata}, which
collects data dependent information needed for plotting in an enriched,
standardized form. 
It also takes any futher arguments to be passed on to \T{ploptions}.
The result is stored as \T{.plargs} in the global environment.
This allows for inspection of the plotting data
\T{.plargs\$pldata} and the active \T{ploptions} (\T{.plargs\$ploptions})
and thereby helps debugging.

\Tit{Plotting properties data.}
There are plotting elements that are useful to represent individual
observations or individual variables.
Those related to the observations include:
\begin{itemize}
\item 
  plotting symbol (character) \T{pch};
\item
  plotting label, an extension of \T{pch} to more than one symbol,
  often used to identify observations, \T{plab};
\item
  plotting size \T{psize}, scaled by the pl option \T{cex};
\item
  color of the symbol, \T{pcol}.
\end{itemize}
These elements are stored in \T{pldata} as columns with names
\T{(pch)}, \T{(plab)}, \T{(psize)}, \T{(pcol)}.
They are generated in \T{pl.control} when the respective arguments
\T{pch, plab, psize, pcol} are given to the high level pl function.
(Alternatively, they may already be contained in the dataset given by the 
argument \T{data}.)
<<plyx_pattr>>=
plyx(Sepal.Width~Sepal.Length, data=iris, 
     pch=Species, psize=Petal.Length, pcol=Species)

table(.plargs$pldata[,"(pch)"])
@ 

The elements attached to variables are
\begin{itemize}
\item
  a variable name \T{varname} and a variable \T{label} 
  (to be used for labelling the axis on which the variable is shown), 
  typically identical to the name of the variable
  in the data.frame it comes from;
\item
  the values for which tick marks and labels should be shown in plots,
  \T{ticksat, ticklabelsat}, and the possibly tick labels \T{ticklabels};
\item
  an inner and an outer plotting range, \T{innerrange} and \T{plrange};
\item
  the extension \T{innerrange.ext} used to calculate \T{plrange}
  from \T{innerrange}, if the latter does not cover all points;
\item 
  the number of points modified at each end of the inner range,
  \T{nmod};
\item
  numerical values \T{numvalues} to represent the given data values in case
  these are not numeric;
\item
  coordinates \T{plcoord}, possibly different from the variable's data values,
  typically when an inner plotting range or jittering is active;
\item
  line type \T{lty} and color \T{col}
  to be used if multiple y's are shown in a plot.
\end{itemize}
These elements are stored as attributes of the variables,
e.g., \T{attr(var, "axisat")}.
They can be either set (or generated by the function \T{genvarattributes} and 
then modified) before calling the high level pl function, such as \T{plyx}.
Those that are needed and have not been stored beforehand will be 
generated by \T{pl.control} when calling such a function.
<<varattributes>>=
attr(iris$Sepal.Length, "ticksat") <- 
  structure(seq(4, 8, 0.5), small=seq(4,8,0.1))

plyx(Sepal.Width~Sepal.Length, data=iris, 
  gridlines=list(Sepal.Length=seq(4,8,0.5)))
@ 

\T{getvariables}
\T{genvarattributes}
\T{varattributes}

\Tit{\T{gendateaxis}.}
The function \T{gendateaxis} provides nice tick values and labels for 
variables expressing a date having a time scale. 
Dates should be expressed in \T{POSIXt} or \T{Date} format.
The function \T{gendate} helps to generate such a date. It is an extension
of \T{as.POSIXct}.

\section{Low level graphics}

Like in basic R, there are ``low level'' graphical functions that
add to an existing plot, whereas ``high level'' functions are designed to 
generate a full plot. Low level plotting functions include:

\begin{itemize}
\item 
\T{plframe} generates a new frame, frames the inner and outer plotting
ranges and draws gridlines and axes, the latter by calling \T{plaxis}. 
\item
  \T{plaxis} draws an axis based on the attributes of the variable given as
  the second argument.   
\item
\T{plpoints} draws points and lines. \\
  In the simplest case, this function places the plotting symbol at the
  given coordinates. As the basic \T{points} function, it draws lines if 
  the argument \T{type} is set to \T{"l"} or \T{"b"}, and the argument
  \T{pch} (or the column \T{"(pch")} in \T{plargs\$pldata}) can provide
  different plotting symbols for the different points.\\
  \T{plpoints} also includes the capabilities of \T{text}: 
  If the argument \T{plab} 
  is set (or \T{plargs\$pladata} contains a column named \T{"(plab)"}),
  it should be a character vector and is reproduced at the (x,y) locations,
  Values \T{NA} or \T{""} being replaced by the plotting symbol in \T{pch}.\\
  The size of the plotting symbols or strings is determined by
  \T{plargs\$pldata[,"psize"]} if available and by the ploptions
  \T{cex} and \T{cex.pch}.

  censored
\item
  \T{plmark} can be used to mark extreme points by labels and leave the
  non-extreme ones to be shown by the plotting symbol.
\item
  \T{plsmooth} and \T{plsmlines} generate a smooth line and draws it 
  in the plot, respectively.
\item
  \T{plrefline} adds reference lines (straight lines or curves) to a plot.
  It is used by \T{plregr} and \T{plresx}.
%%-   as a vector giving intercept and slope of a straight line.
%%-   or a function that returns this list, such as \T{lm};
\item
  \T{pltitle} adds a title. By default, the character size 
  (given by the ploption \T{"title.cex"} is descreased
  for long titles (\T{main} or \T{sub}) to fit it onto one line.
\item
  \T{pllimits} and \T{plcoord} determine inner plotting range 
  (see above) and the respective coordinates where the points outside of it
  will appear on the plot.
\item
  \T{stamp} adds a time stamp and, if available, a project and analysis
  step title to the right bottom corner of the plotting page.
  This is avoided by setting \T{ploptions(stamp=FALSE)}.
\item
  \T{plpanel} is a ``medium level'' function. It calls all of the above
  functions except for \T{plframe}. 
  The user can re-program this function to modify and expand the actions that
  are taken, store the modified function, e.g. under \T{my.panel}
  and then set %% \T{ploptions(panel=my.panel)}
  the argument \T{panel = my.panel} in \T{plyx} and \T{plmatrix}.
\end{itemize}

\section{Auxiliary functions}
These functions do calculations needed for generating graphical elements
(like generating a smooth) or are useful additional functions,
like \T{showd}, which displays a kind of summary of data.
Let us start with the latter.

\Tit{Displaying data by \T{showd}.}
Other auxiliary functions include
\T{clipat},
\T{logst},
\T{notna},
\T{warn}

\T{simresiduals}

\begin{itemize}
\item
  \T{gensmooth}
\item 
  \T{robrange}
\item
  \T{colorpale}
\end{itemize}

\section{Details}

\subsection{plargs, ploptions, default values} 
(if needed, see above)

\Tit{Default values}
\T{i.def}
\T{i.getploption} and \T{i.getplopt}

Some arguments to low level pl functions need to be set by changing
the \T{ploptions} argument.
Example:

residuals in pargs are data.frame

variable colors, ... stored in pdata
generated in pl.control avoiding elements already in use 

\subsection{Components of ploptions}

\Tit{innerrange}
\T{innerrange} is a logical, indicating if inner ranges
should be determined.

\T{innerrange.limits} is a vector of length 2 giving the range to be
applied. If it is logical, it acts as \T{innerrange}.
It can also be a named list of such objects, where the names reflect the 
variables.

\subsection{Point labelling and plotting character}
Priorities:
\begin{enumerate}
\item 
  If they are specified by the respective argument to high level \T{pl} 
  function (and evaluated by \T{pl.control}), this has priority
  (excemption, see 2.).
\item
  In the case of multiple $y$s, colors are determined primarily by 
  the argument \T{vcol} of the high level \T{pl} function, 
  scondarily by the \T{col} attribute of the variables. 
  Thirdly, the \T{variables} component of \T{plappearance} is used,
  avoiding colors that are already specified for some variables by the
  foregoing steps. 
  [See \T{i.getPlattributes}, called by \T{genvarattributes} in 
  \T{pl.control}.]\\
  If \T{pch} is not determined otherwise (argument, see 1., or group,
  see 3.) it is set in the same way.\\
  For plots of type \T{l} or \T{b}, the line type \T{lty} is determined 
  in the same way as the color.
\item
  If there is grouping and only a single $y$, the group determines \T{pch}
  and its color by the \T{group} component of \T{plappearance} unless set
  by 1. above.
\item
  In other cases, the \T{default} component of \T{plappearance} is used.
\end{enumerate}

\subsection{Groups}

\Tit{Color}
If color (\T{pcol}) is a factor, it will be converted into 
\T{ploptions("group.col")[as.numeric(pcol)]}.
In order to give color by color names, make sure that \T{pcol} is
a character variable.

\subsection{Axes, plotting ranges}

\Tit{Setting pl ranges}
The regular and inner plotting ranges can be set by specifying
\T{plrange} and \T{innerrange} in the high level pl function 
by giving a named list of vectors of length 2.
Alternatively, a range can be specified for any variable in a dataset
by setting the attribute \T{attr(dd, "plrange")} or
\T{attr(dd, "innerrange")} or both.

Set the \T{innerrange} attribute by calling genvarattributes. 
Otherwise, you need to call also \T{plcoord} in order to have a conforming
\T{plcoord} attribute of the variable(s).

Note that the resulting \T{innerrange} may differ from the required 
inner range at the end(s) where no data are modified (\T{nmod==0}).

!!!

\Tit{Tick marks}
The tick mark occur in three ``degrees'', the first one being labelled,
the second being only shown by a mark, the third, by a short mark.

\Tit{Gridlines}
If \T{gridlines} is \T{TRUE}, grid lines will be drawn at each (regular)
tick of both axes.

\subsection{Standardized residuals}

\[
R^*_i=R_i\left/\left(\wh\sigma \sqrt{w_i} \sqrt{1-H_{ii}}\right)\right.
\]

Standardization ratio: 
$\T{stratio}_i=R^*_i/R_i$

\T{i.stres} calculates leverages, standardized residuals, and \T{strratio}
according to this formula.
For binary and Poisson models, ...

Cook's distance:
\[
  d_i\sups C=\frac{R_i^2\,H_{ii}}{p\wh\sigma^2\,(1-H_{ii})^2}
  =(1/p)\,R_i^{*2}\,H_{ii}/(1-H_{ii})
  \;,
\]
It is constant, $=d$, on the curve
\[
  R_i^{*2} = d\,p\,(1-H_{ii})/H_{ii}
\]
A rule suggests $d=4/(n-p)$ as a warning level.
Curves are drawn for $d=\T{cookdistlines}^2/(n-p)$.

\subsection{Modified methods for \T{residuals, fitted, predict}}
%
Some methods for the extractor functions \T{residuals, fitted, predict}
needed modifications and extensions.
For example, \T{type="link"} is needed for \T{polr} models.
The package contains a method \T{predict.regrpolr} which is used within the
package and provides the additional type, but is otherwise compatible with
\T{predict.polr} of the package \T{MASS}. It is exported.
Similarly, there are the methods
\T{fitted.regrpolr, residuals.regrpolr, residuals.regrsurvreg, 
  residuals.regrcoxph}.
Since a method for residuals is not available in the \T{MASS} package
for \T{polr} fitted models, \T{residuals.regrpolr} is also
made available as \T{residuals.polr} and thereby provides the missing
method. 


\subsection{Missing values in residual analysis}
Model fitting functions in R support two different ways of dealing with
missing values. The default is determined by the value \T{na.omit}
of the argument \T{na.action}. 
This leads to residuals as extracted by the \T{residuals} function
and other analogous results that do not contain the observations with 
missing values in the data used for fitting.
As a consequence, they cannot be readily combined with variables from the
dataset. 
The alternative choice, \T{na.action=na.exclude}, corrects this flaw.
Vectors of residuals will contain \T{NA}s where appropriate and have 
the same length as the variables in the data.

The pl functions \T{plregr, plresx, plres2x} work with the extended
version. This is reflected in \T{.plargs\$pldata} and allows for
combining that data.frame with the original dataset.

\subsection{Palette}
Even though the palette that is active in the global environment is not
affected, the pl functions use an implicit palette given by 
\T{ploptions("colors")}. By default, the list is
<<c.colors>>=
ploptionsDefault$colors
@ 
The selection of these colors has been driven by the following ideas:
\begin{itemize}
\item 
  The first few should be readily distinguishable and reflect a common 
  sequence: after the default ``black'', the most salient one is red,
  followed by blue, then ``darkgreen'' because ``green'' is lighter than
  the foregoing, and finally ``orange''.
\item
  The first colors should be simply named. If the user explicitly sets one
  of them, e.g., by \T{attr(data\$var, "col") \Gets\ "red"}, the pl
  functions have a chance to avoid them when making default decisions.
\item
  After the first group of 4 alternative colors, another group of 4 follows.
  It is a modification of the first group. The third group is incomplete as
  no blueish color could be found that would be distint enough from the 
  foregoing colers.
\end{itemize}

%% =================================================================
\vspace{10mm}\noindent
{\small
\Tit{This is the end} of the story for the time being. I hope that you will
get into using \T{plgraphics} and have good success with your data analyses.
Feedback is highly appreciated.


Werner Stahel, \T{stahel at stat.math.ethz.ch}
}
\end{document}

%%% Local Variables: 
%%% mode: latex
%%% TeX-master: t
%%% End: 
